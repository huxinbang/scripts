" Let Vim and NeoVim shares the same plugin directory.
" Comment it out if you don't like
let g:spacevim_plug_home = '~/.vim/plugged'

" The default leader key is space key.
" Uncomment the line below and modify "<\Space>" if you prefer another
" let g:spacevim_leader = "<\Space>"

" The default local leader key is comma.
" Uncomment the line below and modify ',' if you prefer another
" let g:spacevim_localleader = ','

" Enable the existing layers in space-vim
let g:spacevim_layers = [
      \ 'fzf', 'unite', 'better-defaults',
      \ 'which-key', 'code-snippets', 'editing',
      \ 'programming', 'formatting'
      \ ]

" If you want to have more control over the layer, try using Layer command.
" if g:spacevim_gui
"   Layer 'airline'
" endif

" Manage your own plugins, refer to vim-plug's instruction for more detials.
function! UserInit()

  " Add plugin via Plug command.
  Plug 'junegunn/seoul256.vim'
  Plug 'scrooloose/nerdcommenter'

  Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

  " (Optional) Multi-entry selection UI.
  Plug 'junegunn/fzf'

  " (Completion plugin option 1)
  Plug 'roxma/nvim-completion-manager'
  " (Completion plugin option 2)
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

  Plug 'jsfaint/gen_tags.vim'
  Plug 'roxma/ncm-clang'

  Plug 'Shougo/neocomplete'
  Plug 'Shougo/neosnippet'
  Plug 'Shougo/neosnippet-snippets'

endfunction

" Override the default settings as well as adding extras
function! UserConfig()

  " Plugin key-mappings.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " SuperTab like snippets behavior.
  " Note: It must be "imap" and "smap".  It uses <Plug> mappings.
  "imap <expr><TAB>
  " \ pumvisible() ? "\<C-n>" :
  " \ neosnippet#expandable_or_jumpable() ?
  " \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

  " For conceal markers.
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif

  set undofile                " Save undos after file closes
  set undodir=$HOME/.vim/undo " where to save undo histories
  set undolevels=1000         " How many undos
  set undoreload=10000        " number of lines to save for undo

  map <silent> <leader>2 :diffget 2<CR> :diffupdate<CR>
  map <silent> <leader>3 :diffget 3<CR> :diffupdate<CR>
  map <silent> <leader>4 :diffget 4<CR> :diffupdate<CR>

  " If you have installed the powerline fonts and want to enable airline layer
  " let g:airline_powerline_fonts=1

  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  " keybindings  for huxinbang@gmail.com

  " Tab configuration
  map <leader>tn :tabnew! %<cr>
  map <leader>te :tabedit 
  map <leader>tc :tabclose<cr>
  map <leader>tm :tabmove
  inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

  " When pressing <leader>cd switch to the directory of the open buffer
  map <leader>cd :cd %:p:h<cr>

  """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  set fencs=utf8,gbk,gb2312,gb18030,cp936

  " Use gui colors in terminal if available
  if has('termguicolors')
    set termguicolors
    if g:spacevim_tmux
      " If use vim inside tmux, see https://github.com/vim/vim/issues/993
      " set Vim-specific sequences for RGB colors
      let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
      let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    endif
  endif

endfunction
